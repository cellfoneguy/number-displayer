module top
  (output logic       out, 
   input  logic [3:0] a, b, c, d);
   
   `protected
=I=?Pg]]b98]35VFO;[0RNN5b3gREM;a&<61YI<S-T?Wg84(N5B36):VTfMIS/3/
NN3Z70BfP&gOIV(UG(G,EUA57QY-R1P]A;:XW4L5(LKIA#^6LF;VPMg7AfQGf099
G4Y_K&2S;Mc-A-4866]c0/#W)R(8aRfBE5Q,.QV5GVV\MM=^WMD63C_EJL?Pa5cK
)<BX_WQ/\+G6g_#<e)#0)SM3&;BMa4FEWP;N-4@M^bPdf5)Q7I>2XGSJ+T=5R[/D
DS2:TL]&(Je=].W\)-XG,d#L#eM?I+D:EKg3.0_/C@#@QF:Y,g8Y>JS]TX-TbWV7
\JC73:DH8Y=\CK[RB1QYBHNdCEEUe8,KQC+2)fe^ZRB8g@P7(Z5eF0CMCEOVf\fB
YFgWLc3P#+S&?;G]FO5J\&C;8HKQUET3L^BFD1[PP8.P@#C98W2R+\6][[43B//Y
G(=g6KH9KPEe;b@B,M/GTf97GYFN<31ALH[GPM]\]I((fM6F:8/RZ4+bQ[20#FBg
Pe?[c)&[#RSJ\/15II1/V&R3RS,9e[VeOeQ);2>Q#H-P]UCJKM75C,JO[(ZWD]e@
N]/(TaB[\7DSN-D7_S13d/,<,3VQ)fROMNC27LCWL42)D.Bd[&g/:K2S=2QHJP^I
]aM[cV^UcfGYJOK#>II?aBRX988<_TM2fcaQ86=GbCV\.@b0O\CH93@[F\+ZP5cC
+^U]Z/b5(4HQJ53S(>G.@c-We1V^9e=3WccW,HWZYEE0+]>9Yg@+eN+WUCF@SaQ>
M]L5BBD3T=AM;bYC=Q1A9,5+eL/R-VH6Bg7#N7@#9afQ]+eXaQF/]e:3:F_e>MB/
SIE3+_>LcBL&LM&,KfbZaRc<D#7dcOW?Y-=MTB\Tg?;.DM.[4<FUBB^bbB0\a?eP
8>2,B_TI3:cW3AVHT5.HBJRUBf?M34&X6.P\+2d,<PfJT2OfCAS1HbCcfA+HX=RF
/N)d6;:f2Q-GA:;?26]-GM?_NDG)^951.R8Y30]VU4c3IM<[WU\a2#CHH(JdT_LF
cO,J?VH3U#&FW@R@e]W6dM6.(T+FXPeFbC(B0>+Ef87J>&2dX<(2<74IHNR2f?9M
^=@L5GI:af;1?.BRYcF>A]T:6R[@5N)YH9SGJ<V;=;cL/;#+IQ>9KE3T+YGR?5K]
UHe9&N-D\3YWEY)[-;M\4W3DYH0Qc<ACgYL15WMOU)S^^R7d>OPdN&SdX_C)RD3Z
2&N]Z]#1&0R>],Y[a7&Of/)&dI9)8\8gb6RK&5[<F\V\BJH/6bT9;a]cLZff\]X/
HKa.-\ZPNa(V>?6FBRe<@gFJR+XN^RbL..&-R_R#L(39gN\-<=AB8.Df3@ACV+YZ
aA6b-8g2LPKDF+)W6gI45G6Z9U8)-Xbf.:41IY_e57/Q^TVRR6SDeX717Y^9g>;(
#/eccVY8JG0;4EG&4??_D7^(R02ONH,DDa_I1/aB;-)+Z?-L5=.9,#>XD[F]&N-P
3UTNd3231dTHNCdV)R,6W?M1[CA0&RK>?7R>\O)JJbHF2TC-@HbH:A5>1WBHE_e_
NC:;1\g^:>D0C.S:R1^6AE:#,g7LVIc.&O:4Hc8]1TNQ#RO=\Ef]6/:Ea=aNbL2C
Hb2RPWC?841H@/0dfK)V.JP5gP06Y>OA).d+AZ&)SW-X(,IM8G8fNE=E=JWJE(Zc
TW;fB@=6+J451X&HSD7JQORd3V-U=+]VUPM9V?aOO6Y+A,M\d\D]]9WI^/Y1@=C<
gK;+Xd\ZP4b+XQDLA31T?Dd3R6#5YLGHO;A4&VJ0+ER0T@bP8FE^T)GMU:6APNgg
-](VKY<-a=@;f?COBX88-14)1,eGV@3OF65IZ:Z^>:]OCgZ^I2UaAD/Y(,)=:TV7
(JNa8+5>b\AQab1+DVc0J.B7I/G]_>_JVUUJ,PGF:c3#_7GEKUJ/OII;:bb#bCB/
HQ]ff53ZWF3DcOFb>c@d)GI0M34_e.UP]X]4@_Ic#>WJPBPW,PP+O7b3/4KVg7K:
XH2cP2c@H([K_>7<A>HT^H60ORFc1T@Nc15cd5ZF04MBF:=8@.&gY44(1eK.Ndc#
3.c;@-Mdf)HJ8_6VA2R[1+5^(LE7c/aMEBY_J+]6Ca#V+V,ZDIbTN>GKAHO:=]PE
HP51.NB2YJ2P_N)93^UQ8+X#gR]J47A5a:1.[-C<B_2NI2g/#5HHQEd=^\?a)SPC
KJ+V,_WC<B;8@d.Q3aF?0e]UWC2ZVF=)HS7U<5DHUF]85dI7#9ZbRYL;1V/g+8FX
7W5gIIeQD_7#867Ca4H(TH^G+36H^WQbQIOMM#Q)K76OGY)bW_Zef;YYOY0RK&Tb
V[.?VcCdOC@]ASCP^/LNFG2PPdT74/3UB?]2VPWE)566,O[=PQe166.9]CKQ[Z(Y
Ee0.+K@F&5XMP__/FKc/973aNReKT=@])?5K#Ec<2]a@4)6_f2)D#Ic(;d_QK^DH
QCJ<R;)#2aSdNK^RC^GG[_X^^f40_)/5U_QHWM=?05SBC[<8>4b1OP560ZbZCaZ,
)DI#YN8YU5&J2G(dcWS6g6D4#->>R@c_U-_:]ET,BWG6N8T6,c<&\g&J.5fgDUWc
9=OWY4<#NEC8,51K=NU/JE;WKZ^64ARL=0.E?KZ=:,/90.cPS&cG(Ab@PZ[B3.O=
VOG>E2\@:Z^+U<8cESSFM?9OV+XcZ2OI@=]#C^YPT/E[Z61W<B):U5,a-()-\^c.
R<,##PLIZ+8-bE]4?(2]W2:J@G]X-aYPgg^IL_@c\3LZ_ZX=?,9(#3:daLA[aE2H
7_bG/#_1D2DK3YcN(L@6W96N8S73<ME2SML><8HOC]IPCZRRFK0?Xb--LJ;9]7-;
6W,N=KX4XD+=S5X,#\WR_&K_9.RFCISaFD22BH.UX<+WA.-=7cKH<3I:(Q]IAbLA
=N/)?dcC,89ag[:P/)X_#X-+]cBKLd0NG:11VH+KZ&>C?YYg9.&W.Q&7B]^04@Ud
C3.9>d4IAa;e>eEZ;[Yc9T[a]a^Nc&6549=-(H2&<0a3:H^)U(-\P,d]YO4YXL1_
TA&2]-BC2,P0\O6?\=@9BLbH6WV0HOQ=W65X#(^,9A<Z<5;)5^#Q;.f4WSSATP@B
TT7ZQC;YeW\YeP7TS8MMK@cY,b8e+DbU?FgDO:3CX.3N8499g.#FfPb>QA_fJU>D
)OACTdE/=5]?Q5LIGURQ9[Le=/)f.KZ39NEK9-dcEDaI25)W_5+BNgX^Y_D7X-TG
d)Ub=TEa9)g_Yc:CSXAJe-LLC(MGWYcLJ5@d+HU1E-)MQP_g9<YH=R0ce_7/g9G6
L>SfSfVHcIF[1SPWF644H-(0aHW.agLgC2]4I]6b989MD$
`endprotected


endmodule : top


module Adder
  (output logic [3:0] out, 
   input  logic [3:0] a, b,
   input  logic [5:0] error);

  logic a_flip, a_zero, a_ones, b_flip, b_zero, b_ones; // only one error type allowed
  assign {a_flip, a_zero, a_ones, b_flip, b_zero, b_ones} = error;
   
  always_comb begin 
    if (a_flip) out = {a[3:1], ~a[0]} + b;
    else if (a_zero) out = 4'b0 + b;
    else if (a_ones) out = 4'b1111 + b;
    else if (b_flip) out = a + {b[3:1], ~b[0]};
    else if (b_zero) out = a + 4'b0;
    else if (b_ones) out = a + 4'b1111;
    else
      out = a + b;
  end

endmodule : Adder

module Comparator
  (output logic       altb, 
   input  logic [3:0] a, b,
   input  logic [5:0] error);

  logic a_flip, a_zero, a_ones, b_flip, b_zero, b_ones; // only one error type allowed

  assign {a_flip, a_zero, a_ones, b_flip, b_zero, b_ones} = error;
   
  always_comb begin 
    if (a_flip)      altb = ({a[3:1], ~a[0]} < b);
    else if (a_zero) altb = (4'b0 < b);
    else if (a_ones) altb = (4'b1111 < b);
    else if (b_flip) altb = (a < {b[3:1], ~b[0]});
    else if (b_zero) altb = (a < 4'b0);
    else if (b_ones) altb = (a < 4'b1111);
    else
      altb = (a < b);
  end

endmodule : Comparator


module Subtractor
  (output logic [3:0] out, 
   input  logic [3:0] a, b,
   input  logic [5:0] error);

  logic a_flip, a_zero, a_ones, b_flip, b_zero, b_ones; // only one error type allowed

  assign {a_flip, a_zero, a_ones, b_flip, b_zero, b_ones} = error;
   
  always_comb begin 
    if (a_flip) out = {a[3:1], ~a[0]} - b;
    else if (a_zero) out = 4'b0 - b;
    else if (a_ones) out = 4'b1111 - b;
    else if (b_flip) out = a - {b[3:1], ~b[0]};
    else if (b_zero) out = a - 4'b0;
    else if (b_ones) out = a - 4'b1111;
    else
      out = a - b;
  end

endmodule : Subtractor

